# All assembly defintions taken from: https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/CM71-00101-4E.pdf

define endian=big;
define alignment=2;

define space ram type=ram_space size=4 wordsize=1 default;
define space register type=register_space size=4;

define register offset=0 size=4
[r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15];


define register offset=0x0080 size=4 [ mult_addr ];    # Special internal register for dealing with multiple stores/loads

define register offset=0x100 size=4 [pc ps tbr rp ssp usp mdl mdh];

define register offset=0x200 size=4 
[ccr0 ccr1 ccr2 ccr3 ccr4 ccr5 ccr6 ccr7 ccr8 ccr9 ccr10 ccr11 ccr12 ccr13 ccr14 ccr15];

define context ps
    ilm4=(20,20)
    s_f=(5,5)
    i_f=(4,4)
;

# PS Parts
@define CCR "ps[0,8]"
@define SCR "ps[8,3]"
@define ILM "ps[16,5]"

# CCR Flags
@define S_FLAG "ps[5,1]"
@define I_FLAG "ps[4,1]"
@define N_FLAG "ps[3,1]"
@define Z_FLAG "ps[2,1]"
@define V_FLAG "ps[1,1]"
@define C_FLAG "ps[0,1]"



define token instr16(16)
    ta_opcode = (8, 15)  # 0xFF00
    ta_reg_j = (4,7)     # 0x00F0
    ta_reg_s = (4,7)     # 0x00F0 dedicated register Rs
    ta_reg_i = (0,3)     # 0x000F

    tb_opcode = (12,15)  # 0xF000
    tb_x = (4,11)        # 0x0FF0
    tb_xs =(4,11) signed # 0x0FF0
    tb_reg_i = (0,3)     # 0x000F

    tc_opcode = (8, 15)  # 0xFF00
    tc_x = (4,7)         # 0x00F0
    tc_xs =(4,7) signed  # 0x00F0 
    tc_reg_i = (0,3)     # 0x000F

    td_opcode = (8,15)   # 0xFF00
    td_x = (0,7)         # 0x00FF
    td_xs =(0,7) signed  # 0x00FF
    td_op_a   = (12,15)  # 0xF000
    td_op_b   = (8,11)   # 0x0F00

    te_opcode = (4,15)   # 0xFFF0
    te_reg_i = (0,3)     # 0x000F
    te_reg_s = (0,3)     # 0x000F

    tf_opcode = (11,15)  # 0xF800
    tf_off = (0,10)      # 0x07FF
    tf_offs =(0,10) signed # 0x07FF

    tz_opcode = (0,15)   # 0xFFFF
         
    td_x0000 = (0,0)
    td_x0001 = (0,1)
    td_x0002 = (0,2)
    td_x0003 = (0,3)
    td_x0004 = (0,4)
    td_x0005 = (0,5)
    td_x0006 = (0,6)
    td_x0101 = (1,1)
    td_x0202 = (2,2)
    td_x0303 = (3,3)
    td_x0404 = (4,4)
    td_x0505 = (5,5)
    td_x0606 = (6,6)
    td_x0707 = (7,7) 
;

define token instr32(32)
    tx_opcode = (24, 31)  # 0xFF000000
    tx_xh = (20,23)       # 0x00F00000
    tx_reg_i = (16,19)    # 0x000F0000
    tx_xl = (0,15)        # 0x0000FFFF
    
    #copsv
    tw_opcode = (20,31)   # 0xFFF00000
    tw_u      = (16,19)   # 0x000F0000
    tw_cc     = ( 8,15)   # 0x0000FF00
    tw_crj    = ( 4,7)    # 0x000000F0
    tw_reg_i  = ( 0,3)    # 0x0000000F
;


define token ext32(32)
    imm32 = (0,31)
;

attach variables [ ta_reg_j ta_reg_i tb_reg_i tc_reg_i te_reg_i tw_reg_i ] [
    r0  r1  r2  r3  r4  r5  r6  r7
    r8  r9 r10 r11 r12  r13 r14 r15
];

attach variables [ te_reg_s ta_reg_s ] [
    tbr rp ssp usp mdh mdl _ _ _ _ _ _ _ _ _ _
];

attach variables [ tw_crj ] [
    ccr0 ccr1 ccr2 ccr3 ccr4 ccr5 ccr6 ccr7 ccr8 ccr9 ccr10 ccr11 ccr12 ccr13 ccr14 ccr15
];


macro addflags(op1, op2) {     # Flags set by add instructions
$(C_FLAG) = (carry(op1,op2));  # Check for carry
$(V_FLAG) = (scarry(op1,op2)); # Check for signed carry
}

macro subflags(op1, op2) {     # Flags set by sub instructions
$(C_FLAG) = (op1 < op2);       # Check for carry
$(V_FLAG) = sborrow(op1,op2);  # Check for signed carry
}


macro resultflags(op1) {       # Set N,Z flag for results
 $(N_FLAG) = op1 s< 0;
 $(Z_FLAG) = op1 == 0;
}


imm20: val is tx_xh & tx_xl [ val = tx_xl + (tx_xh<<16); ] {
    local tmp:4 = tx_xl + (tx_xh<<16);
    export tmp;
}

tb_disp9: disp9 is tb_xs [ disp9 = tb_xs*2; ]{
    local tmp:4 = tb_xs*2;
    export tmp;
}

tb_disp10: disp10 is tb_xs [ disp10 = tb_xs*4; ] {
    local tmp:4 = tb_xs*4;
    export tmp;
}

tc_udisp6: udisp6 is tc_x [ udisp6 = tc_x*4; ] {
    local tmp:4 = tc_x*4;
    export tmp;
}

td_label9: label9 is td_xs [ label9 = inst_next + (td_xs*2); ]{ export *[ram]:4 label9; }


td_x_u10: u10 is td_x [u10 = td_x*4;] {
    local tmp:4 = td_x*4;
    export tmp;
}

td_rel: s10 is td_xs [ s10 = td_xs*4; ]{
    local tmp:4 = td_xs*4;
    export tmp;
}

tf_label12: label12 is tf_offs [ label12 = inst_next + (tf_offs*2); ] { export *[ram]:4 label12; }





#7.1
:add ta_reg_j, ta_reg_i is ta_opcode=0b10100110 & ta_reg_i & ta_reg_j {
    addflags(ta_reg_i,ta_reg_j);
    ta_reg_i = ta_reg_i + ta_reg_j;  
    resultflags(ta_reg_i);
}

#7.2 
:add tc_x, tc_reg_i is tc_opcode=0b10100100 & tc_reg_i & tc_x {
    addflags(tc_reg_i,tc_x);
    tc_reg_i = tc_reg_i + tc_x;  
    resultflags(tc_reg_i);
}

#7.3
:add2 tc_xs, tc_reg_i is tc_opcode=0b10100101 & tc_reg_i & tc_xs {
    addflags(tc_reg_i,tc_xs);
    tc_reg_i = tc_reg_i + tc_xs;  
    resultflags(tc_reg_i);
}

#7.4 
:u_addc ta_reg_j, ta_reg_i is ta_opcode=0b10100111 & ta_reg_i & ta_reg_j unimpl

#7.5
:addn ta_reg_j, ta_reg_i is ta_opcode=0b10100010 & ta_reg_i & ta_reg_j {
    # no flags set
    ta_reg_i = ta_reg_i + ta_reg_j;  
} 

#7.6
:addn tc_x, tc_reg_i is tc_opcode=0b10100000 & tc_reg_i & tc_x {
    # no flags set
    tc_reg_i = tc_reg_i + tc_x; 
}

#7.7
:addn2 tc_xs, tc_reg_i is tc_opcode=0b10100001 & tc_reg_i & tc_xs {
    # no flags set
    tc_reg_i = tc_reg_i + tc_xs;  
}

#7.8
:u_sub ta_reg_j, ta_reg_i is ta_opcode=0b10101100 & ta_reg_i & ta_reg_j unimpl

#7.9
:u_subc ta_reg_j, ta_reg_i is ta_opcode=0b10101101 & ta_reg_i & ta_reg_j unimpl

#7.10
:subn ta_reg_j, ta_reg_i is ta_opcode=0b10101110 & ta_reg_i & ta_reg_j {
    ta_reg_i = ta_reg_i - ta_reg_j;
}

#7.11
:cmp ta_reg_j, ta_reg_i is ta_opcode=0b10101010 & ta_reg_i & ta_reg_j {
    subflags(ta_reg_i, ta_reg_j);
    resultflags(ta_reg_i - ta_reg_j);
}

#7.12
:cmp tc_x, tc_reg_i is tc_opcode = 0b10101000 & tc_reg_i & tc_x {
    subflags(tc_reg_i, tc_x);
    resultflags(tc_reg_i - tc_x);
}

#7.13
:cmp2 tc_x, tc_reg_i is tc_opcode = 0b10101001 & tc_reg_i & tc_x {
    local tmp:4 = 0xFFFFFF | tc_x;
    subflags(tc_reg_i, tmp);
    resultflags(tc_reg_i - tmp);
}

#7.14
:u_and ta_reg_j, ta_reg_i is ta_opcode=0b10000010 & ta_reg_i & ta_reg_j unimpl

#7.15
:u_and ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10000100 & ta_reg_i & ta_reg_j unimpl

#7.16
:u_andh ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10000101 & ta_reg_i & ta_reg_j unimpl

#7.17
:u_andb ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10000110 & ta_reg_i & ta_reg_j unimpl

#7.18
:u_or ta_reg_j, ta_reg_i is ta_opcode=0b10010010 & ta_reg_j & ta_reg_i unimpl

#7.19
:u_or ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10010100 & ta_reg_j & ta_reg_i unimpl

#7.20
:u_orh ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10010101 & ta_reg_j & ta_reg_i unimpl

#7.21
:u_orb ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10010110 & ta_reg_j & ta_reg_i unimpl

#7.22
:u_eor ta_reg_j,ta_reg_i is ta_opcode=0b10011010 & ta_reg_j & ta_reg_i unimpl

#7.23
:u_eor ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10011100 & ta_reg_j & ta_reg_i unimpl

#7.24
:u_eorh ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10011101 & ta_reg_j & ta_reg_i unimpl

#7.25
:u_eorb ta_reg_j, "@"^ta_reg_i is ta_opcode=0b10011110 & ta_reg_j & ta_reg_i unimpl

#7.26
:u_bandl tc_x, "@"^tc_reg_i is tc_opcode=0b10000000 & tc_reg_i & tc_x unimpl

#7.27
:u_bandh tc_x, "@"^tc_reg_i is tc_opcode=0b10000001 & tc_reg_i & tc_x unimpl

#7.28
:u_borl tc_x, "@"^tc_reg_i is tc_opcode=0b10010000 & tc_reg_i & tc_x unimpl

#7.29
:u_borh tc_x, "@"^tc_reg_i is tc_opcode=0b10010001 & tc_reg_i & tc_x unimpl

#7.30
:u_beorl tc_x, "@"^tc_reg_i is tc_opcode=0b10011000 & tc_reg_i & tc_x unimpl

#7.31
:u_beorh tc_x, "@"^tc_reg_i is tc_opcode=0b10011001 & tc_reg_i & tc_x unimpl

#7.32
:u_btstl tc_x, "@"^tc_reg_i is tc_opcode=0b10001000 & tc_reg_i & tc_x unimpl

#7.33
:u_btsth tc_x, "@"^tc_reg_i is tc_opcode=0b10001001 & tc_reg_i & tc_x unimpl

#7.34
:u_mul ta_reg_j, ta_reg_i is ta_opcode=0b10101111 & ta_reg_i & ta_reg_j unimpl

#7.35
:u_mulu ta_reg_j, ta_reg_i is ta_opcode=0b10101011 & ta_reg_i & ta_reg_j unimpl

#7.36
:u_mulh ta_reg_j, ta_reg_i is ta_opcode=0b10111111 & ta_reg_i & ta_reg_j unimpl

#7.37
:u_muluh ta_reg_j, ta_reg_i is ta_opcode=0b10111011 & ta_reg_i & ta_reg_j unimpl

#7.38
:u_div0 te_reg_i is te_opcode=0b100101110100 & te_reg_i unimpl

#7.39
:u_div0u te_reg_i is te_opcode=0b100101110101 & te_reg_i unimpl

#7.40
:u_div1 te_reg_i is te_opcode=0b100101110110 & te_reg_i unimpl

#7.41
:u_div2 te_reg_i is te_opcode=0b100101110111 & te_reg_i unimpl

#7.42
:u_div3 is tz_opcode=0b1001111101100000 unimpl

#7.43
:u_div4s is tz_opcode=0b1001111101110000 unimpl

#7.44
:u_lsl ta_reg_j, ta_reg_i is ta_opcode=0b10110110 & ta_reg_i & ta_reg_j unimpl

#7.45
:u_lsl tc_x, tc_reg_i is tc_opcode=0b10110100 & tc_reg_i & tc_x unimpl

#7.46
:u_lsl2 tc_x, tc_reg_i is tc_opcode=0b10110101 & tc_reg_i & tc_x unimpl

#7.47
:u_lsr ta_reg_j, ta_reg_i is ta_opcode=0b10110010 & ta_reg_i & ta_reg_j unimpl

#7.48
:u_lsr tc_x, tc_reg_i is tc_opcode=0b10110000 & tc_reg_i & tc_x unimpl

#7.49
:u_lsr2 tc_x, tc_reg_i is tc_opcode=0b10110001 & tc_reg_i & tc_x unimpl

#7.50
:u_asr ta_reg_j, ta_reg_i is ta_opcode=0b10111010 & ta_reg_i & ta_reg_j unimpl

#7.51
:u_asr tc_x, tc_reg_i is tc_opcode=0b10111000 & tc_reg_i & tc_x unimpl

#7.52
:u_asr2 tc_x, tc_reg_i is tc_opcode=0b10111001 & tc_reg_i & tc_x unimpl

#7.53
:ldi^":"^32 imm32,te_reg_i is te_opcode=0b100111111000 & te_reg_i ; imm32 {
    te_reg_i = imm32;
}

#7.54
:ldi^":"^20 imm20, tx_reg_i is tx_opcode=0b10011011 & tx_reg_i & tx_xh & tx_xl & imm20
{
    tx_reg_i = imm20;
}

#7.55
:ldi^":"^8 tb_x,tb_reg_i is tb_opcode=0b1100 & tb_reg_i & tb_x
{
    tb_reg_i = tb_x;
}

#7.56
:ld "@"^ta_reg_j, ta_reg_i is ta_opcode=0b00000100 & ta_reg_i & ta_reg_j {
    ta_reg_i = *:4 ta_reg_j;
}

#7.57
:ld "@(r13," ta_reg_j^")," ta_reg_i is ta_opcode=0b00000000 & ta_reg_i & ta_reg_j {
    local ea:4 = r13 + ta_reg_j;
    ta_reg_i = *:4 ea;
}

#7.58
:ld "@(r14," tb_disp10^")," tb_reg_i is tb_opcode=0b0010 & tb_reg_i & tb_disp10 {
    local ea:4 = r14 + tb_disp10;
    tb_reg_i = *:4 ea;
}

#7.59
:ld "@(r15," tc_udisp6^")," tc_reg_i is tc_opcode=0b00000011 & tc_reg_i & tc_udisp6 {
    local ea:4 = r15 + tc_udisp6;
    tc_reg_i = *:4 ea;
}

te_reg_i_inc: is te_reg_i=15 { }
te_reg_i_inc: is te_reg_i { r15 = r15 + 4; }

#7.60
:ld "@r15+," te_reg_i is te_opcode=0b000001110000 & te_reg_i & te_reg_i_inc {
    ri = *:4 r15;
    build te_reg_i_inc;
    #realy not sure this works as expected. TODO test.
}

#7.61
ld_61: "A" is te_reg_s=4 & s_f=0 { }
ld_61: "B" is te_reg_s=5 & s_f=1 { }
ld_61: "C" is te_reg_s { r15 = r15 + 4; }

:ld "@r15+," te_reg_s is te_opcode=0b000001111000 & te_reg_s & ld_61 {
    te_reg_s = *:4 r15;
    build ld_61;
}

#7.62
ld_62: "A" is ilm4=0 { ps = *:4 r15; }
ld_62: "B" is ilm4=1 { ps = *:4 r15; ps[20,1] = 1; }

:ld "@r15+, ps" is tz_opcode=0b0000011110010000 & ld_62
{
    build ld_62;
    r15 = r15 + 4;
} 

#7.63
:lduh @^ta_reg_j, ta_reg_i is ta_opcode=0b00000101 & ta_reg_i & ta_reg_j {
    ta_reg_i = *:2 ta_reg_j;
}

#7.64
:lduh "@(r13," ta_reg_j^")," ta_reg_i is ta_opcode=0b00000001 & ta_reg_i & ta_reg_j {
    local ea:4 = r13 + ta_reg_j;
    ta_reg_i = *:2 ea;
}

#7.65
:lduh "@(r14," tb_disp9^")," tb_reg_i is tb_opcode=0b0100 & tb_reg_i & tb_disp9 {
    local ea:4 = r14 + tb_disp9;
    tb_reg_i = *:2 ea;
}

#7.66
:ldub @^ta_reg_j, ta_reg_i is ta_opcode=0b00000110 & ta_reg_i & ta_reg_j {
    ta_reg_i = *:1 ta_reg_j;
}

#7.67
:ldub "@(r13," ta_reg_j^")," ta_reg_i is ta_opcode=0b00000010 & ta_reg_i & ta_reg_j {
    local ea:4 = r13 + ta_reg_j;
    ta_reg_i = *:1 ea;
}

#7.68
:ldub "@(r14," tb_x^")," tb_reg_i is tb_opcode=0b0110 & tb_reg_i & tb_x {
    local ea:4 = r14 + tb_x;
    tb_reg_i = *:1 ea;
}

#7.69
:st ta_reg_i, @^ ta_reg_j is ta_opcode=0b00010100 & ta_reg_i & ta_reg_j {
    *:4 ta_reg_j = ta_reg_i;
}

#7.70
:st ta_reg_i, "@(r13," ta_reg_j ^")" is ta_opcode=0b00010000 & ta_reg_i & ta_reg_j {
    local ea:4 = r13 + ta_reg_j;
    *:4 ea = ta_reg_i;
}

#7.71
:st tb_reg_i, "@(r14," tb_disp10 ^")" is tb_opcode=0b0011 & tb_reg_i & tb_disp10 {
    local ea:4 = r14 + tb_disp10;
    *:4 ea = tb_reg_i;
}

#7.72
:st tc_reg_i, "@(r15," tc_udisp6 ^")" is tc_opcode=0b00010011 & tc_reg_i & tc_udisp6 {
    local ea:4 = r15 + tc_udisp6;
    *:4 ea = tc_reg_i;
}

#7.73
:st te_reg_i, "@-r15" is te_opcode = 0b000101110000 & te_reg_i {
    local tmp = te_reg_i;
    r15 = r15 - 4;
    *:4 r15 = tmp;
}

#7.74
:st te_reg_s, "@-r15" is te_opcode = 0b000101111000 & te_reg_s {
    r15 = r15 - 4;
    *:4 r15 = te_reg_s;
}

#7.75
:st ps, "@-r15" is tz_opcode = 0b0001011110010000 & ps {
    r15 = r15 - 4;
    *:4 r15 = ps;
}

#7.76
:sth ta_reg_i,@ta_reg_j is ta_opcode=0b00010101 & ta_reg_i & ta_reg_j
{
    *:2 ta_reg_j = ta_reg_i;
}

#7.77
:sth ta_reg_i, "@(r13," ta_reg_j ^")" is ta_opcode=0b00010001 & ta_reg_i & ta_reg_j
{
    local ea:4 = r13 + ta_reg_j;
    *:2 ea = ta_reg_i[0,16];
}

#7.78
:sth tb_reg_i, "@(r14," tb_disp9 ^")" is tb_opcode=0b0101 & tb_reg_i & tb_disp9 {
    local ea = r14 + tb_disp9;
    *:2 ea = tb_reg_i[0,16];
}

#7.79
:stb ta_reg_i, @^ ta_reg_j is ta_opcode=0b00010110 & ta_reg_i & ta_reg_j {
    *:1 ta_reg_j = ta_reg_i[0,8];
}

#7.80
:stb ta_reg_i, "@(r13," ta_reg_j ^")" is ta_opcode=0b00010010 & ta_reg_i & ta_reg_j {
    local ea = r13 + ta_reg_j;
    *:1 ea = ta_reg_i[0,8];
}

#7.81
:stb tb_reg_i, "@(r14," tb_xs ^")" is tb_opcode=0b0111 & tb_xs & tb_reg_i {
    local ea = r14 + tb_xs;
    *:1 ea = tb_reg_i[0,8];    
}

#7.82
:mov ta_reg_j, ta_reg_i is ta_opcode=0b10001011 & ta_reg_i & ta_reg_j {
    ta_reg_i = ta_reg_j;
}

#7.83
:mov ta_reg_s, ta_reg_i is ta_opcode=0b10110111 & ta_reg_i & ta_reg_s {
    ta_reg_i = ta_reg_s;
}

#7.84
:mov "ps," te_reg_i is te_opcode=0b000101110001 & te_reg_i {
    te_reg_i = ps;
}

#7.85
:mov ta_reg_i, ta_reg_s is ta_opcode=0b10110011 & ta_reg_i & ta_reg_s {
    ta_reg_s = ta_reg_i;
}

#7.86
:mov te_reg_i, "ps" is te_opcode=0b00001110001 & te_reg_i {
    ps = te_reg_i;
}

#7.87
:jmp @^te_reg_i is te_opcode=0b100101110000 & te_reg_i {
    pc = te_reg_i;
    goto [pc];
}

#7.88
:call tf_label12 is tf_opcode=0b11010 & tf_label12 {
    rp = pc + 2;
    pc = tf_label12;
    call [pc];
}

#7.89
:call "@"^te_reg_i is te_opcode=0b100101110001 & te_reg_i {
    rp = pc + 2;
    pc = te_reg_i;
    call [pc];    
}

#7.90
:ret is tz_opcode = 0b1001011100100000 {
    pc = rp;
    return [rp];
}

#7.91
:int td_x is td_opcode=0b00011111 & td_x {
    ssp = ssp - 4;
    *:4 ssp = ps;
    ssp = ssp - 4;
    *:4 ssp = inst_next;
    $(I_FLAG) = 0;
    $(S_FLAG) = 0;
    local ea:4 = tbr + 0x3FC - (td_x * 4);
    pc = ea;
    goto [ea];
}

#7.92
:u_inte is tz_opcode=0b1001111100110000 unimpl

#7.93
:u_reti is tz_opcode=0b1001011100110000 unimpl

#7.94 x16
bcc: "bra" is td_op_b=0b0000 & td_label9 { goto td_label9; } 
bcc: "bno" is td_op_b=0b0001 & td_label9 { } 
bcc: "beq" is td_op_b=0b0010 & td_label9 { if( $(Z_FLAG)==1 ) goto td_label9; } 
bcc: "bne" is td_op_b=0b0011 & td_label9 { if( $(Z_FLAG)==0 ) goto td_label9; } 
bcc: "bc"  is td_op_b=0b0100 & td_label9 { if( $(C_FLAG)==1 ) goto td_label9; } 
bcc: "bnc" is td_op_b=0b0101 & td_label9 { if( $(C_FLAG)==0 ) goto td_label9; } 
bcc: "bn"  is td_op_b=0b0110 & td_label9 { if( $(N_FLAG)==1 ) goto td_label9; } 
bcc: "bp"  is td_op_b=0b0111 & td_label9 { if( $(N_FLAG)==0 ) goto td_label9; } 
bcc: "bv"  is td_op_b=0b1000 & td_label9 { if( $(V_FLAG)==1 ) goto td_label9; } 
bcc: "bnv" is td_op_b=0b1001 & td_label9 { if( $(V_FLAG)==0 ) goto td_label9; } 
bcc: "blt" is td_op_b=0b1010 & td_label9 { if( ($(V_FLAG)^$(N_FLAG))==1 ) goto td_label9; } 
bcc: "bge" is td_op_b=0b1011 & td_label9 { if( ($(V_FLAG)^$(N_FLAG))==0 ) goto td_label9; } 
bcc: "ble" is td_op_b=0b1100 & td_label9 { if( (($(V_FLAG)^$(N_FLAG))|$(Z_FLAG))==1 ) goto td_label9; } 
bcc: "bgt" is td_op_b=0b1101 & td_label9 { if( (($(V_FLAG)^$(N_FLAG))|$(Z_FLAG))==0 ) goto td_label9; } 
bcc: "bls" is td_op_b=0b1110 & td_label9 { if( ($(C_FLAG)|$(Z_FLAG))==1 ) goto td_label9; } 
bcc: "bhi" is td_op_b=0b1111 & td_label9 { if( ($(C_FLAG)|$(Z_FLAG))==0 ) goto td_label9; } 

: bcc td_label9 is td_op_a=0b1110 & td_label9 & bcc {  
}

#7.95
:jmp^":D" "@"^te_reg_i is te_opcode=0b100111110000 & te_reg_i {
    pc = te_reg_i;
    delayslot(1);
    goto [pc];
}

#7.96
:call^":D" tf_label12 is tf_opcode=0b11011 & tf_label12 {
    rp = pc + 4;
    pc = tf_label12;
    delayslot(1);
    call [pc];
}

#7.97
:call^":D" "@"^te_reg_i is te_opcode=0b100111110001 & te_reg_i {
    rp = pc + 4;
    pc = te_reg_i;
    delayslot(1);
    call [pc];
}

#7.98
:ret^":D" is tz_opcode = 0b1001111100100000 {
    pc = rp;
    delayslot(1);
    return [rp];
}

#7.99 x16
: bcc^":D" td_label9 is td_op_a=0b1111 & td_label9 & bcc {
    delayslot(1);
    build bcc;
}


#7.100
:dmov "@"^td_x_u10, "r13" is td_opcode=0b00001000 & td_x_u10 {
    r13 = *:4 td_x_u10;
}

#7.101
:dmov "r13, @"^td_x_u10 is td_opcode=0b00011000 & td_x_u10 {
    *:4 td_x_u10 = r13;
}

td_dir9: dir9 is td_x [dir9 = td_x*2;]{
    local tmp:4 = td_x*2;
    export tmp;
}

#7.102
:dmov "@"^td_x_u10, "@r13+" is td_opcode=0b00001100 & td_x_u10 {
    *:4 r13 = *:4 td_x_u10;
    r13 = r13 + 4;
}

#7.103
:dmov "@r13+, @"^td_x_u10 is td_opcode=0b00011100 & td_x_u10 {
    *:4 td_x_u10 = *:4 r13;
    r13 = r13 + 4;
}

#7.104
:dmov "@"^td_x_u10^", @-r15" is td_opcode=0b00001011 & td_x_u10 {
    r15 = r15 - 4;  
    *:4 r15 = *:4 td_x_u10;
}


#7.105
:dmov "@r15+, @"^td_x_u10 is td_opcode=0b00011011 & td_x_u10 {
    *:4 td_x_u10 = *:4 r15;
    r15 = r15 + 4;
}

#7.106
:dmovh "@"^td_dir9^", r13" is td_opcode=0b00001001 & td_dir9 {
    local ea:4 = td_dir9;
    r13 = *:2 ea;
}

#7.107
:dmovh "r13, @"^td_dir9 is td_opcode=0b00011001 & td_dir9 {
    local ea:4 = td_dir9;
    *:2 ea = r13[0,8];
}

#7.108
:dmovh "@"^td_dir9^", @r13+" is td_opcode=0b00001101 & td_dir9 {
    local ea:4 = td_dir9;
    *:2 r13 = *:2 ea;
    r13 = r13 + 2;
}

#7.109
:dmovh "@r13+, @"^td_dir9 is td_opcode=0b00011101 & td_dir9 {
    local ea:4 = td_dir9;
    *:2 ea = *:2 r13;
    r13 = r13 + 2;
}

#7.110
:dmovb "@"^td_x^", r13" is td_opcode=0b00001010 & td_x {
    local ea:4 = td_x;
    r13 = *:1 ea;
}

#7.111
:dmovb "r13, @"^td_x is td_opcode=0b00011010 & td_x {
    local ea:4 = td_x;
    *:1 ea = r13[0,8];
}

#7.112
:dmovb "@"^td_x, "@r13+" is td_opcode=0b00001110 &td_x {
    local ea:4 = td_x;
    *:1 r13 = *:1 ea;
    r13 = r13 + 1;
}

#7.113
:dmovb "#r13+, @"^td_x is td_opcode=0b00011110 & td_x {
    local ea:4 = td_x;
    *:1 ea = *:1 r13;
    r13 = r13 + 1;
}

#7.114
:u_ldres "@"^tc_reg_i^"+," tc_x is tc_opcode=0b10111100 & tc_x & tc_reg_i unimpl

#7.115
:u_stres tc_x, "@"^tc_reg_i^"+" is tc_opcode=0b10111101 & tc_x & tc_reg_i unimpl
#{
#    # Resource on channel u4 → (Ri)
#    tc_reg_i = tc_reg_i + 4;
#}

#7.116
:copop tw_u, tw_cc, tw_crj, tw_reg_i is tw_opcode=0b100111111100 & tw_u & tw_cc & tw_crj & tw_reg_i {
    #SOME co-processor magic.. then
}


#7.117
:copld tw_u, tw_cc, tw_crj, tw_reg_i is tw_opcode=0b100111111101 & tw_u & tw_cc & tw_crj & tw_reg_i {
    #SOME co-processor magic.. then
    tw_crj = tw_reg_i;
}

#7.118
:copst tw_u, tw_cc, tw_crj, tw_reg_i is tw_opcode=0b100111111110 & tw_u & tw_cc & tw_crj & tw_reg_i {
    #SOME co-processor magic.. then
    tw_reg_i = tw_crj;
}

#7.119
:copsv tw_u, tw_cc, tw_crj, tw_reg_i is tw_opcode=0b100111111111 & tw_u & tw_cc & tw_crj & tw_reg_i {
    #SOME co-processor magic.. then
    tw_reg_i = tw_crj;
}

#7.120
:nop is tz_opcode = 0b1001111110100000 {}

#7.121
:andccr td_x is td_opcode=0b10000011 & td_x {
    $(CCR) = $(CCR) & td_x;
}

#7.122
:orccr td_x is td_opcode=0b10010011 & td_x {
    $(CCR) = $(CCR) | td_x;
}

#7.123
:u_stilm td_x is td_opcode=0b10000111 & td_x unimpl

#7.124
:addsp td_rel is td_opcode=0b10100011 & td_xs & td_rel {
    r15 = r15 + td_rel;
}

#7.125
:extsb te_reg_i is te_opcode=0b100101111000 & te_reg_i {
    te_reg_i = sext(te_reg_i[0,8]);
}
#7.126
:extub te_reg_i is te_opcode=0b100101111001 & te_reg_i {
    te_reg_i = zext(te_reg_i[0,8]);
}

#7.127
:extsh te_reg_i is te_opcode=0b100101111010 & te_reg_i {
    te_reg_i = sext(te_reg_i[0,16]);
}

#7.128
:extuh te_reg_i is te_opcode=0b100101111011 & te_reg_i {
    te_reg_i = zext(te_reg_i[0,16]);
}

#7.129
:u_ldm0 "(reglist)" is td_opcode=0b10001100 & td_x unimpl

#7.130
:u_ldm1 "(reglist)" is td_opcode=0b10001101 & td_x unimpl


rl_a7: ""                  is td_x0000=0                              { mult_addr = mult_addr; }
rl_a7: r7                  is td_x0000=1 & r7                         { mult_addr = mult_addr - 4; *mult_addr = r7; }
rl_a6: rl_a7               is rl_a7 & td_x0101=0                      { mult_addr = mult_addr; }
rl_a6: r6                  is rl_a7 & td_x0101=1 & r6 & td_x0000=0    { mult_addr = mult_addr - 4; *mult_addr = r6; }
rl_a6: r6^"," rl_a7        is rl_a7 & td_x0101=1 & r6                 { mult_addr = mult_addr - 4; *mult_addr = r6; }
rl_a5: rl_a6               is rl_a6 & td_x0202=0                      { mult_addr = mult_addr; }
rl_a5: r5                  is rl_a6 & td_x0202=1 & r5 & td_x0001=0    { mult_addr = mult_addr - 4; *mult_addr = r5; }
rl_a5: r5^"," rl_a6        is rl_a6 & td_x0202=1 & r5                 { mult_addr = mult_addr - 4; *mult_addr = r5; }
rl_a4: rl_a5               is rl_a5 & td_x0303=0                      { mult_addr = mult_addr; }
rl_a4: r4                  is rl_a5 & td_x0303=1 & r4 & td_x0002=0    { mult_addr = mult_addr - 4; *mult_addr = r4; }
rl_a4: r4^"," rl_a5        is rl_a5 & td_x0303=1 & r4                 { mult_addr = mult_addr - 4; *mult_addr = r4; }
rl_a3: rl_a4               is rl_a4 & td_x0404=0                      { mult_addr = mult_addr; }
rl_a3: r3                  is rl_a4 & td_x0404=1 & r3 & td_x0003=0    { mult_addr = mult_addr - 4; *mult_addr = r3; }
rl_a3: r3^"," rl_a4        is rl_a4 & td_x0404=1 & r3                 { mult_addr = mult_addr - 4; *mult_addr = r3; }
rl_a2: rl_a3               is rl_a3 & td_x0505=0                      { mult_addr = mult_addr; }
rl_a2: r2                  is rl_a3 & td_x0505=1 & r2 & td_x0004=0    { mult_addr = mult_addr - 4; *mult_addr = r2; }
rl_a2: r2^"," rl_a3        is rl_a3 & td_x0505=1 & r2                 { mult_addr = mult_addr - 4; *mult_addr = r2; }
rl_a1: rl_a2               is rl_a2 & td_x0606=0                      { mult_addr = mult_addr; }
rl_a1: r1                  is rl_a2 & td_x0606=1 & r1 & td_x0005=0    { mult_addr = mult_addr - 4; *mult_addr = r1; }
rl_a1: r1^"," rl_a2        is rl_a2 & td_x0606=1 & r1                 { mult_addr = mult_addr - 4; *mult_addr = r1; }
reg_list_a:  rl_a1         is rl_a1 & td_x0707=0                      { mult_addr = mult_addr; }
reg_list_a:  r0            is rl_a1 & td_x0707=1 & r0 & td_x0006=0    { mult_addr = mult_addr - 4; *mult_addr = r0; }
reg_list_a:  r0^"," rl_a1  is rl_a1 & td_x0707=1 & r0                 { mult_addr = mult_addr - 4; *mult_addr = r0; }

#7.131
:stm0 "("^reg_list_a^")" is td_opcode=0b10001110 & reg_list_a {
    mult_addr = r15;
    build reg_list_a;
    r15 = mult_addr;
}

rl_b7: ""                  is td_x0000=0                              { mult_addr = mult_addr; }
rl_b7: r15                 is td_x0000=1 & r15                        { mult_addr = mult_addr - 4; *mult_addr = r15; }
rl_b6: rl_b7               is rl_b7 & td_x0101=0                      { mult_addr = mult_addr; }
rl_b6: r14                 is rl_b7 & td_x0101=1 & r14 & td_x0000=0   { mult_addr = mult_addr - 4; *mult_addr = r14; }
rl_b6: r14^"," rl_b7       is rl_b7 & td_x0101=1 & r14                { mult_addr = mult_addr - 4; *mult_addr = r14; }
rl_b5: rl_b6               is rl_b6 & td_x0202=0                      { mult_addr = mult_addr; }
rl_b5: r13                 is rl_b6 & td_x0202=1 & r13 & td_x0001=0   { mult_addr = mult_addr - 4; *mult_addr = r13; }
rl_b5: r13^"," rl_b6       is rl_b6 & td_x0202=1 & r13                { mult_addr = mult_addr - 4; *mult_addr = r13; }
rl_b4: rl_b5               is rl_b5 & td_x0303=0                      { mult_addr = mult_addr; }
rl_b4: r12                 is rl_b5 & td_x0303=1 & r12 & td_x0002=0   { mult_addr = mult_addr - 4; *mult_addr = r12; }
rl_b4: r12^"," rl_b5       is rl_b5 & td_x0303=1 & r12                { mult_addr = mult_addr - 4; *mult_addr = r12; }
rl_b3: rl_b4               is rl_b4 & td_x0404=0                      { mult_addr = mult_addr; }
rl_b3: r11                 is rl_b4 & td_x0404=1 & r11 & td_x0003=0   { mult_addr = mult_addr - 4; *mult_addr = r11; }
rl_b3: r11^"," rl_b4       is rl_b4 & td_x0404=1 & r11                { mult_addr = mult_addr - 4; *mult_addr = r11; }
rl_b2: rl_b3               is rl_b3 & td_x0505=0                      { mult_addr = mult_addr; }
rl_b2: r10                 is rl_b3 & td_x0505=1 & r10 & td_x0004=0   { mult_addr = mult_addr - 4; *mult_addr = r10; }
rl_b2: r10^"," rl_b3       is rl_b3 & td_x0505=1 & r10                { mult_addr = mult_addr - 4; *mult_addr = r10; }
rl_b1: rl_b2               is rl_b2 & td_x0606=0                      { mult_addr = mult_addr; }
rl_b1: r9                  is rl_b2 & td_x0606=1 & r9 & td_x0005=0    { mult_addr = mult_addr - 4; *mult_addr = r9; }
rl_b1: r9^"," rl_b2        is rl_b2 & td_x0606=1 & r9                 { mult_addr = mult_addr - 4; *mult_addr = r9; }
reg_list_b:  rl_b1         is rl_b1 & td_x0707=0                      { mult_addr = mult_addr; }
reg_list_b:  r8            is rl_b1 & td_x0707=1 & r8 & td_x0006=0    { mult_addr = mult_addr - 4; *mult_addr = r8; }
reg_list_b:  r8^"," rl_b1  is rl_b1 & td_x0707=1 & r8                 { mult_addr = mult_addr - 4; *mult_addr = r8; }

#7.132
:stm1 (^reg_list_b^) is td_opcode=0b10001111 & reg_list_b {
    mult_addr = r15;
    build reg_list_b;
    r15 = mult_addr;
}


#7.133
:enter td_x_u10 is td_opcode=0b00001111 & td_x_u10 {
    local ea:4 = r15 - 4;
    *:4 ea = r14;
    r14 = ea;
    r15 = r15 - td_x_u10;       
}

#7.134
:leave is tz_opcode=0b1001111110010000 {
    r15 = r14 + 4;
    r14 = *(r15-4);
}

#7.135
:xchb @^ta_reg_j, ta_reg_i is ta_opcode=0b10001010 & ta_reg_j & ta_reg_i {
    local tmp:1 = ta_reg_i[0,8];
    ta_reg_i = zext(*:1 ta_reg_j);
    *:1 ta_reg_j = tmp;
}